
@using Kendo.Mvc.UI
@using SMS.Service
@using SMS.Model
@using SMS.Data
@using SMS.Controllers

@{
    ViewBag.Title = "Student List";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var permission = ViewBag.Permission as SMS.Model.FormRoleMapping;
    string formCode = AuthorizeFormAccess.FormAccessCode.ROLES.ToString();
    RoleMasterService roleMasterService = new RoleMasterService();
    UserMasterService userMasterService = new UserMasterService();
    string role = roleMasterService.GetRolesById(SessionHelper.RoleId).RoleName;
    BaseController _base = new BaseController();
    bool AllowedEdit = _base.CheckPermission(formCode, AcessPermission.IsEdit);
    bool AllowedAdd = _base.CheckPermission(formCode, AcessPermission.IsAdd);
    bool AllowedDelete = _base.CheckPermission(formCode, AcessPermission.IsDelete);

   @Scripts.Render("~/bundles/kendo")

}

<div class="subheader">
    <div class="left_title">
        <h2 style="margin-left:45px; color:black">@ViewBag.Title</h2>

    </div>
    <div class="subheader_right">

        @if (TempData["Message"] != null)
        {
            <label class="bg-success text-white alertmsg"> @TempData["Message"]</label>
        }


        @if (permission.AllowInsert)
        {
            <a class="button button_primary button_rounded" href="@Url.Action("Create", "Student")" style="margin-right:45px">Add Student</a>
        }
    </div>
</div>

<div class="common_white_box listingpage" style="margin-left: 40px; margin-right: 40px">
    <div class="page-loader k-loading-image"></div>

    @(Html.Kendo().Grid<SMS.Model.StudentModel>
    ()
    .Name("gridStudent")
    .AutoBind(false)
    .Columns(columns =>
    {
        columns.Bound(c => c.Firstname).Width("10%").Title("First Name");
        columns.Bound(c => c.Lastname).Width("10%").Title("Last Name");
        columns.Bound(c => c.Email).Width("10%").Title("Email");
        columns.Bound(c => c.Age).Width("10%").Title("Age");
        columns.Bound(c => c.Standard).Width("10%").Title("Standard");
        columns.Bound(c => c.Gender).Width("10%").Title("Gender");
        columns.Bound(c => c.ContactNumber).Width("10%").Title("Contact Number");
        if (role == "sadmin")
        {
            columns.Bound(c => c.StudentId).HeaderHtmlAttributes(new { @class = "center_text" }).HtmlAttributes(new { @class = "kendogrid_Action center_text" }).ClientTemplate("<div class='k_action_table'>" + ("<a title='Edit' href='" + Url.Action("Edit", "Student") + "/#=StudentId#' " + "><i class='fa fa-edit'></i></a>") + (permission.AllowDelete ? "<a title='Delete' onclick=Delete('#: StudentId #')><i class='fa fa-trash-o' style='font-size:17px'></i></a>" : "" ) + "</div>" ).Filterable(false).Title("Action").Width("5%").Sortable(false);
        }
        else
        {
            columns.Bound(c=>
            c.StudentId).HeaderHtmlAttributes(new { @class = "center_text" }).HtmlAttributes(new { @class = "kendogrid_Action center_text" }).ClientTemplate("<div class='k_action_table'>" + ("<a title='Edit' href='" + Url.Action("Edit", "Student") + "/#=StudentId#' " + "><i class='fa fa-edit'></i></a>") + "</div>").Filterable(false).Title("Edit").Width("5%").Sortable(false).Hidden(!permission.AllowInsert);
        }
    })
    .NoRecords("No record found")
    .Events(evt=>
    evt
    .DataBinding("fnKendoGridCommonDataBinding")
    .DataBound("fnKendoGridDataBoundEvent")
    )
    .Sortable()
    .Filterable(filter => filter
    .Mode(GridFilterMode.Row)
    .Extra(false)
    .Operators(o => o.ForString(f => f.Clear().Contains("Contains").DoesNotContain("Does Not Contain").StartsWith("Starts With").EndsWith("Ends With").IsEqualTo("Equal To").IsNotEqualTo("Not Equal To")))
    .Operators(o => o.ForNumber(g => g.Clear().IsEqualTo("EqualTo").IsNotEqualTo("Not Equal To").IsGreaterThan("Greater Than").IsGreaterThanOrEqualTo("Greater Than Or Equal To").IsLessThan("Less Than").IsLessThanOrEqualTo("Less Than Or Equal To")))
    )
   .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(new[] { 5 ,10, 20, 50, 100, 200 })
    .ButtonCount(5))
    .DataSource(dataSource => dataSource
    .Ajax()
    .Sort(sortable=>sortable.Add("Standard").Ascending())
    .Read(read => read.Action("GetGridData", "Student")).PageSize(10)
    .Destroy(update => update.Action("Delete", "Student"))
    // .Destroy(d => d.Url("Index?handler=Delete").Data("forgeryToken"))
    .Update(edit => edit.Action("Edit", "Student"))
    .Model(model => model.Id(p => p.StudentId))
    )
    .Editable(Id => Id.Mode(GridEditMode.PopUp).ConfirmDelete("Are you sure you want to delete?").DisplayDeleteConfirmation("Are you sure you want to delete?"))
    )
</div>


<script>

    $(document).ready(function () {
        $('#gridStudent').data('kendoGrid').dataSource.read();
        $('#gridStudent').data('kendoGrid').refresh();
    });
    $(document).ajaxComplete(function () {
        $(".page-loader").css("display", "none");
        $(window).resize();
    });


    $(document).ready(function () {
        var successElement = $(".alertmsg");
        if (successElement) {
            setTimeout(function () { successElement.hide(); }, 2000);
        }
    });

    function Delete(studentId) {
        if (confirm("Are you sure you want to delete ?") == true) {

            $.get('/Student/Delete', { StudentId: studentId }, function () {
                $('#gridStudent').data('kendoGrid').dataSource.read();
                $('#gridStudent').data('kendoGrid').refresh();
            });
        }
        else {
            return false;
        }

    }

</script>


